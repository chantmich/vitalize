{"version":3,"sources":["../bower_components/true/sass/true/_messages.scss","tests.css","../bower_components/true/sass/true/_assert.scss","core/_functions.scss","../scss/core/_global.scss","core/_mixins.scss"],"names":[],"mappings":"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","file":"results.css","sourcesContent":["// Messages\n// ========\n\n/// New line helper\n/// @access private\n/// @group x_private\n/// @type String\n$-tnl: '\\a ';\n\n\n/// Return a CSS selector for the current context\n/// @access private\n/// @group x_private\n/// @param {List} $scope - Scope\n/// @require {function} _true-context\n/// @return {String} - CSS selector\n@function _true-selector(\n  $scope\n) {\n  $selector: null;\n\n  @each $layer in $scope {\n    $this: '[data-#{$layer}=\"#{_true-context($layer)}\"]';\n    $selector: if($selector, '#{$selector} #{$this}', $this);\n  }\n\n  @return $selector;\n}\n\n\n/// Output a spacer comment\n/// @access private\n/// @group x_private\n/// @output A spacer comment\n@mixin _true-spacer() {\n/*\n*/\n}\n\n\n/// Output a message to CSS comments, or command line terminal (via debug/warn)\n/// @access private\n/// @group x_private\n/// @param {String} $message - Message to output\n/// @param {String} $output [comments] - Type of output, either `comments`, `terminal`, `debug` or `warn`\n/// @require {function} _true-str-split\n@mixin _true-message(\n  $message,\n  $output: comments\n) {\n  $lines: _true-str-split($message, $-tnl);\n  @if index($output, comments) {\n    @each $line in $lines {\n      /* #{$line} */\n    }\n  } @else if index($output, debug) or index($output, terminal) {\n    @each $line in $lines  {\n      @debug $line;\n    }\n  } @else if index($output, warn) {\n    @warn $message;\n    @each $line in $lines {\n      @if index($lines, $line) == length($lines) {\n        @warn $line;\n      } @else {\n        @debug $line;\n      }\n    }\n  }\n}\n","/* # map-deep-get ---------- */\n/* should return the value of the requested key from a deep nested map */\n[data-module=\"map-deep-get\"] [data-test=\"should return the value of the requested key from a deep nested map\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return the value from a deep nested map.\"; }\n\n/* # map-deep-set ---------- */\n/* should set the value of the requested key from a deep nested map */\n[data-module=\"map-deep-set\"] [data-test=\"should set the value of the requested key from a deep nested map\"] .assert-equal {\n  -result: PASS;\n  -description: \"Set a value to deep nested map.\"; }\n\n/* # map-has-keys ---------- */\n/* should return true if the requested keys from a map exists */\n[data-module=\"map-has-keys\"] [data-test=\"should return true if the requested keys from a map exists\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return true if a deep key exists.\"; }\n\n/* should return false if the requested keys from a map doesn't exists */\n[data-module=\"map-has-keys\"] [data-test=\"should return false if the requested keys from a map doesn't exists\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return true if a deep key exists.\"; }\n\n/* # map-has-nested-keys ---------- */\n/* should return true if the requested keys from a deeply nested map exists */\n[data-module=\"map-has-nested-keys\"] [data-test=\"should return true if the requested keys from a deeply nested map exists\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return true if map got all '$keys' nested with each others.\"; }\n\n/* should return false if the requested keys from a deeply nested map doesn't exists */\n[data-module=\"map-has-nested-keys\"] [data-test=\"should return false if the requested keys from a deeply nested map doesn't exists\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return true if map got all '$keys' nested with each others.\"; }\n\n/* # map-depth ---------- */\n/* should return the depth level of athe deeply nested map */\n[data-module=\"map-depth\"] [data-test=\"should return the depth level of athe deeply nested map\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return the level of depth the map has.\"; }\n\n/* # map-extend ---------- */\n/* should return a merged map of 2 or more maps */\n[data-module=\"map-extend\"] [data-test=\"should return a merged map of 2 or more maps\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a merged map of 2 or more maps\"; }\n\n/* should return a merged map of 2 or more deeply nested maps */\n[data-module=\"map-extend\"] [data-test=\"should return a merged map of 2 or more deeply nested maps\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a merged map of 2 or more maps\"; }\n\n/* # map-zip ---------- */\n/* should return a merged map from a list of keys and a list of values */\n[data-module=\"map-zip\"] [data-test=\"should return a merged map from a list of keys and a list of values\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a map with merged lists of keys and values.\"; }\n\n/* # map-combine ---------- */\n/* should return a merged map from a list of keys and a list of values */\n[data-module=\"map-combine\"] [data-test=\"should return a merged map from a list of keys and a list of values\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a map with combined lists of keys and values.\"; }\n\n/* # str-replace ---------- */\n/* should return a string with replaced substring */\n[data-module=\"str-replace\"] [data-test=\"should return a string with replaced substring\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a string with replaced characters.\"; }\n\n/* # str-escape ---------- */\n/* should return a escaped string */\n[data-module=\"str-escape\"] [data-test=\"should return a escaped string\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a string with escaped characters.\"; }\n\n/* # str-escape ---------- */\n/* should return a escaped string */\n[data-module=\"str-escape\"] [data-test=\"should return a escaped string\"] .assert-equal {\n  -result: PASS;\n  -description: \"Return a string with escaped characters.\"; }\n\n/* # keyframe ---------- */\n/* should output prefixed keyframes with requested name */\n@-webkit-keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@-webkit-keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/* # animation-set ---------- */\n/* should output animation keyframes with default properties and extensions */\n[data-module=\"animation-set\"] [data-test=\"should output animation keyframes with default properties and extensions\"] [data-assert=\"Outputs animation with keyframes, properties and extensions.\"] .input {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n[data-module=\"animation-set\"] [data-test=\"should output animation keyframes with default properties and extensions\"] [data-assert=\"Outputs animation with keyframes, properties and extensions.\"] .expect .vitalize {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/* should output animation keyframes with custom properties and extensions */\n[data-module=\"animation-set\"] [data-test=\"should output animation keyframes with custom properties and extensions\"] [data-assert=\"Outputs animation with keyframes, properties and extensions.\"] .input {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 1s;\n  animation-delay: 1s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n[data-module=\"animation-set\"] [data-test=\"should output animation keyframes with custom properties and extensions\"] [data-assert=\"Outputs animation with keyframes, properties and extensions.\"] .expect .vitalize {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 1s;\n  animation-delay: 1s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/* # animation-name-set ---------- */\n/* should output prefixed animation name property */\n[data-module=\"animation-name-set\"] [data-test=\"should output prefixed animation name property\"] [data-assert=\"Outputs prefixed animation name property.\"] .input {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\"; }\n\n[data-module=\"animation-name-set\"] [data-test=\"should output prefixed animation name property\"] [data-assert=\"Outputs prefixed animation name property.\"] .expect {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\"; }\n\n/* # animation-properties-set ---------- */\n/* should output prefixed animation properties */\n[data-module=\"animation-properties-set\"] [data-test=\"should output prefixed animation properties\"] [data-assert=\"Outputs prefixed animation property.\"] .input {\n  -webkit-animation-iteration-count: 2;\n  animation-iteration-count: 2;\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n[data-module=\"animation-properties-set\"] [data-test=\"should output prefixed animation properties\"] [data-assert=\"Outputs prefixed animation property.\"] .expect {\n  -webkit-animation-iteration-count: 2;\n  animation-iteration-count: 2;\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/* # animation-property-set ---------- */\n/* should output prefixed animation property */\n[data-module=\"animation-property-set\"] [data-test=\"should output prefixed animation property\"] [data-assert=\"Outputs prefixed animation property.\"] .input {\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n[data-module=\"animation-property-set\"] [data-test=\"should output prefixed animation property\"] [data-assert=\"Outputs prefixed animation property.\"] .expect {\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/* # SUMMARY ---------- */\n/* \"20 Tests:\" */\n/* \" - 14 Passed\" */\n/* \" - 0 Failed\" */\n/* \" - 6 Output to CSS\" */\n/* -------------------- */\n","// Assert\n// ======\n\n\n/// Assert that a parameter is `true`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-true(\n  $assert,\n  $description: ''\n) {\n  @include _true-assert-start($description);\n  $result: if($assert, pass, fail);\n\n  .assert-true {\n    -result: to-upper-case($result);\n    -description: $description;\n\n    @if $result == fail {\n      @include _true-fail-details(true, $assert);\n    }\n  }\n\n  @include _true-assert-stop($result);\n}\n\n/// Assert that a parameter is `false`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-false(\n  $assert,\n  $description: ''\n) {\n  @include _true-assert-start($description);\n  $result: if($assert, fail, pass);\n\n  .assert-false {\n    -result: to-upper-case($result);\n    -description: $description;\n\n    @if $result == fail {\n      @include _true-fail-details(false, $assert);\n    }\n  }\n\n  @include _true-assert-stop($result);\n}\n\n/// /// Assert that two parameters are `equal`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {*} $expected - Expected result\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-equal(\n  $assert,\n  $expected,\n  $description: ''\n) {\n  @include _true-assert-start($description);\n  $result: if(_true-is-equal($assert, $expected), pass, fail);\n\n  .assert-equal {\n    -result: to-upper-case($result);\n    -description: $description;\n\n    @if $result == fail {\n      @include _true-fail-details($expected, $assert);\n    }\n  }\n\n  @include _true-assert-stop($result);\n}\n\n/// Assert that two parameters are `unequal`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {*} $expected - Expected result\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-unequal(\n  $assert,\n  $expected,\n  $description: ''\n) {\n  @include _true-assert-start($description);\n  $result: if(_true-is-equal($assert, $expected), fail, pass);\n\n  .assert-unequal {\n    -result: to-upper-case($result);\n    -description: $description;\n\n    @if $result == fail {\n      @include _true-fail-details($expected, $assert);\n    }\n  }\n\n  @include _true-assert-stop($result);\n}\n\n\n// CSS Output Tests\n// ----------------\n\n/// Define a CSS-output assertion\n/// @access public\n/// @group testing\n/// @param {String} $description - Assert description\n/// @content Use `input()` and `expect()` mixins to define blocks for comparison\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n/// @require {function} _true-selector\n@mixin assert(\n  $description\n) {\n  @include _true-assert-start($description);\n\n  #{_true-selector(assert)} {\n    @content;\n  }\n\n  @include _true-assert-stop(output-to-css);\n}\n\n/// Describe the test content to be evaluated\n/// The output will be compared against the results of the `expect()` mixin.\n/// @access public\n/// @group testing\n@mixin input {\n  .input {\n    @content;\n  }\n}\n\n/// Describe the output content to be expected.\n/// The output will be compared against the results of the `input()` mixin.\n/// @access public\n/// @group testing\n@mixin expect {\n  .expect {\n    @content;\n  }\n}\n\n\n// Assert Start\n// ------------\n\n/// True assert start helper\n/// @access private\n/// @group x_private\n/// @param {String} $name - Assert name\n/// @require {mixin} _true-context\n@mixin _true-assert-start(\n  $name\n) {\n  @include _true-context(assert, $name);\n}\n\n/// True assert sort helper\n/// @access private\n/// @group x_private\n/// @param {String} $result - Assert result\n/// @require {mixin} _true-context\n/// @require {mixin} _true-update\n@mixin _true-assert-stop(\n  $result\n) {\n  @include _true-update(test, $result);\n  @include _true-context(assert, null);\n}\n\n\n// Details\n// -------\n\n/// Fail details\n/// @access private\n/// @group x_private\n/// @param {*} $expected - Expected result\n/// @param {*} $returned - Returned result\n/// @param {Bool} $terminal [$true-terminal-output] - Whether or not to use terminal output\n/// @require $true-terminal-output\n/// @require {function} _true-context\n@mixin _true-fail-details(\n  $expected,\n  $returned,\n  $terminal: $true-terminal-output\n) {\n  $expected-type: type-of($expected);\n  $returned-type: type-of($returned);\n\n  -expected--#{$expected-type}: inspect($expected);\n  -returned--#{$returned-type}: inspect($returned);\n\n  @if $terminal {\n    @debug '[FAIL] #{_true-context(test)} » #{_true-context(assert)}';\n    @debug 'Expected #{$expected-type} »';\n    @debug inspect($expected);\n    @debug 'Returned #{$returned-type} »';\n    @debug inspect($returned);\n  }\n\n  @warn '#{_true-context(test)} » #{_true-context(assert)}';\n}\n","// Haleks — Vitalize\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Functions\n// =========\n\n// Map\n// ---\n\n$map: (\n    'first': (\n        'second': 100,\n        'third': 'testing',\n        'fourth': 500px,\n    ),\n    'fifth': 'test'\n);\n\n@include test-module('map-deep-get') {\n    @include test('should return the value of the requested key from a deep nested map') {\n        $actual: map-deep-get($map, 'first', 'second');\n        $expected: 100;\n\n        @include assert-equal($actual, $expected,\n            'Return the value from a deep nested map.'\n        );\n    }\n}\n\n@include test-module('map-deep-set') {\n    @include test('should set the value of the requested key from a deep nested map') {\n        $actual: map-deep-set($map, 'first', 'second', 500);\n        $expected: (\n            'first': (\n                'second': 500,\n                'third': 'testing',\n                'fourth': 500px,\n            ),\n            'fifth': 'test'\n        );\n\n        @include assert-equal($actual, $expected,\n            'Set a value to deep nested map.'\n        );\n    }\n}\n\n@include test-module('map-has-keys') {\n    @include test('should return true if the requested keys from a map exists') {\n        $actual: map-has-keys($map, 'first', 'fifth');\n        $expected: true;\n\n        @include assert-equal($actual, $expected,\n            'Return true if a deep key exists.'\n        );\n    }\n\n    @include test('should return false if the requested keys from a map doesn\\'t exists') {\n        $actual: map-has-keys($map, 'first', 'second');\n        $expected: false;\n\n        @include assert-equal($actual, $expected,\n            'Return true if a deep key exists.'\n        );\n    }\n}\n\n@include test-module('map-has-nested-keys') {\n    @include test('should return true if the requested keys from a deeply nested map exists') {\n        $actual: map-has-nested-keys($map, 'first', 'second');\n        $expected: true;\n\n        @include assert-equal($actual, $expected,\n            'Return true if map got all \\'$keys\\' nested with each others.'\n        );\n    }\n\n    @include test('should return false if the requested keys from a deeply nested map doesn\\'t exists') {\n        $actual: map-has-nested-keys($map, 'first', 'fifth');\n        $expected: false;\n\n        @include assert-equal($actual, $expected,\n            'Return true if map got all \\'$keys\\' nested with each others.'\n        );\n    }\n}\n\n@include test-module('map-depth') {\n    @include test('should return the depth level of athe deeply nested map') {\n        $actual: map-depth($map);\n        $expected: 2;\n\n        @include assert-equal($actual, $expected,\n            'Return the level of depth the map has.'\n        );\n    }\n}\n\n@include test-module('map-extend') {\n    @include test('should return a merged map of 2 or more maps') {\n        $actual: map-extend($map, ('sixth': 200), ('seveth': 150));\n        $expected: (\n            'first': (\n                'second': 100,\n                'third': 'testing',\n                'fourth': 500px,\n            ),\n            'fifth': 'test',\n            'sixth': 200,\n            'seveth': 150\n        );\n\n        @include assert-equal($actual, $expected,\n            'Return a merged map of 2 or more maps'\n        );\n    }\n\n    @include test('should return a merged map of 2 or more deeply nested maps') {\n        $actual: map-extend($map, ('first': ('second': 500)), ('sixth': 200), ('seveth': 150), true);\n        $expected: (\n            'first': (\n                'second': 500,\n                'third': 'testing',\n                'fourth': 500px,\n            ),\n            'fifth': 'test',\n            'sixth': 200,\n            'seveth': 150\n        );\n\n        @include assert-equal($actual, $expected,\n            'Return a merged map of 2 or more maps'\n        );\n    }\n}\n\n@include test-module('map-zip') {\n    @include test('should return a merged map from a list of keys and a list of values') {\n        $actual: map-zip(('first', 'fifth'), (('second': 100, 'third': 'testing', 'fourth': 500px), 'test'));\n        $expected: (\n            'first': (\n                'second': 100,\n                'third': 'testing',\n                'fourth': 500px,\n            ),\n            'fifth': 'test',\n        );\n\n        @include assert-equal($actual, $expected,\n            'Return a map with merged lists of keys and values.'\n        );\n    }\n}\n\n@include test-module('map-combine') {\n    @include test('should return a merged map from a list of keys and a list of values') {\n        $actual: map-combine(('first', 'fifth'), 'test');\n        $expected: (\n            'first': 'test',\n            'fifth': 'test',\n        );\n\n        @include assert-equal($actual, $expected,\n            'Return a map with combined lists of keys and values.'\n        );\n    }\n}\n\n// String\n// ------\n\n@include test-module('str-replace') {\n    @include test('should return a string with replaced substring') {\n        $string: 'hello you';\n\n        $actual: str-replace($string, 'you', 'world');\n        $expected: 'hello world';\n\n        @include assert-equal($actual, $expected,\n            'Return a string with replaced characters.'\n        );\n    }\n}\n\n@include test-module('str-escape') {\n    @include test('should return a escaped string') {\n        $str: 'hello world.';\n\n        $actual: str-escape($str);\n        $expected: 'hello world\\\\.';\n\n        @include assert-equal($actual, $expected,\n            'Return a string with escaped characters.'\n        );\n    }\n}\n\n@include test-module('str-escape') {\n    @include test('should return a escaped string') {\n        $str: 'hello world.';\n\n        $actual: str-escape($str);\n        $expected: 'hello world\\\\.';\n\n        @include assert-equal($actual, $expected,\n            'Return a string with escaped characters.'\n        );\n    }\n}\n","// Haleks — Vitalize\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Global\n// ======\n@import 'functions';\n\n// Variables\n// ---------\n\n// Generate the animations classes.\n$vitalize-include-class: true !default;\n\n// Vitalize global default map.\n// This map is used to merge missing map keys and values of each the\n// of the properties variables set in the settings.\n$vitalize-global-properties: (\n    'count': 1,\n    'duration': 1s,\n    'delay': 0s,\n    'function': 'ease',\n    'fill-mode': 'both',\n    'visibility': 'hidden'\n) !global;\n\n// Set default for all animations and make sure all properties are merged.\n$vitalize-default-properties: $vitalize-global-properties !default;\n$vitalize-default-properties: map-merge($vitalize-global-properties, $vitalize-default-properties);\n\n// Set default extensions for all animations.\n$vitalize-default-extensions: () !default;\n\n\n// Mixins\n// ======\n\n// Keyframes\n// ---------\n// - Outputs prefixed keyframes.\n// - @param string $name\n@mixin keyframes($name) {\n    $name: str-escape($name);\n\n    @-webkit-keyframes #{$name} {\n        @content;\n    }\n\n    @keyframes #{$name} {\n        @content;\n    }\n}\n\n\n// Animation\n// =========\n\n// Set Animation\n// -------------\n// - Outputs animation with keyframes, properties and extensions.\n// - @param string $name\n// - @param map $options\n@mixin animation-set($name, $options: ()) {\n    $options: map-extend(('properties': $vitalize-default-properties, 'extensions': $vitalize-default-extensions), $options, true);\n\n    @include keyframes($name) {\n        @content\n    };\n\n\t@include animation-name-set($name);\n\t@include animation-properties-set(map-get($options, 'properties'));\n    @include animation-extensions-set(map-get($options, 'extensions'));\n}\n\n// Set animation name\n// ------------------\n// - Outputs prefixed animation name property.\n// - @param string $name\n@mixin animation-name-set($name) {\n    -webkit-animation-name: $name;\n    animation-name: $name;\n}\n\n// Set animation properties\n// ------------------------\n// - Outputs all prefixed animation properties.\n// - @param map $properties\n@mixin animation-properties-set($properties) {\n    @each $name, $value in $properties {\n        @include animation-property-set($name, $value)\n    }\n}\n// Set animation extensions\n// ------------------------\n// - Outputs all extensions.\n// - @param map $extensions\n@mixin animation-extensions-set($extensions) {\n    @each $name, $values in $extensions {\n        @include animation-extension-set($name, $values);\n    }\n}\n\n// Set animation extension\n// -----------------------\n// - Outputs requested extension.\n// - @param string $name\n// - @param string|number $value\n@mixin animation-extension-set($name, $values) {\n    @each $classname, $value in $values {\n        $classname: str-escape($classname);\n\n        &.#{$name}-#{$classname} {\n            @include animation-property-set($name, $value);\n        }\n    }\n}\n\n// Set animation property\n// ----------------------\n// - Outputs requested prefixed animation property.\n// - @param string $name\n// - @param string|number $value\n@mixin animation-property-set($name, $value) {\n    @if ($name == 'count') {\n        $name: 'iteration-count';\n    }\n\n    -webkit-animation-#{$name}: unquote($value);\n    animation-#{$name}: unquote($value);\n}\n","// Haleks — Vitalize\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Mixins\n// ======\n\n// Keyframe\n// --------\n\n@include test-module('keyframe') {\n    @include test('should output prefixed keyframes with requested name') {\n        @include assert('Outputs prefixed keyframes.') {\n            @include input {\n                @include keyframes('name') {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                };\n            }\n\n            @include expect {\n                @-webkit-keyframes name {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n\n                @keyframes name {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Animation\n// ---------\n\n@include test-module('animation-set') {\n    @include test('should output animation keyframes with default properties and extensions') {\n        @include assert('Outputs animation with keyframes, properties and extensions.') {\n            @include input {\n                @include animation-set('vitalize') {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n            }\n\n            @include expect {\n                .vitalize {\n                    -webkit-animation-name: \"vitalize\";\n                    animation-name: \"vitalize\";\n                    -webkit-animation-iteration-count: 1;\n                    animation-iteration-count: 1;\n                    -webkit-animation-duration: 1s;\n                    animation-duration: 1s;\n                    -webkit-animation-delay: 0s;\n                    animation-delay: 0s;\n                    -webkit-animation-function: ease;\n                    animation-function: ease;\n                    -webkit-animation-fill-mode: both;\n                    animation-fill-mode: both;\n                    -webkit-animation-visibility: hidden;\n                    animation-visibility: hidden;\n                }\n\n                @-webkit-keyframes vitalize {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n\n                @keyframes vitalize {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n            }\n        }\n    }\n\n    @include test('should output animation keyframes with custom properties and extensions') {\n        @include assert('Outputs animation with keyframes, properties and extensions.') {\n            @include input {\n                $options: (\n                    'properties': (\n                        'delay': 1s\n                    )\n                );\n\n                @include animation-set('vitalize', $options) {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n            }\n\n            @include expect {\n                .vitalize {\n                    -webkit-animation-name: \"vitalize\";\n                    animation-name: \"vitalize\";\n                    -webkit-animation-iteration-count: 1;\n                    animation-iteration-count: 1;\n                    -webkit-animation-duration: 1s;\n                    animation-duration: 1s;\n                    -webkit-animation-delay: 1s;\n                    animation-delay: 1s;\n                    -webkit-animation-function: ease;\n                    animation-function: ease;\n                    -webkit-animation-fill-mode: both;\n                    animation-fill-mode: both;\n                    -webkit-animation-visibility: hidden;\n                    animation-visibility: hidden;\n                }\n\n                @-webkit-keyframes vitalize {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n\n                @keyframes vitalize {\n                    from {\n                        color: red;\n                    }\n\n                    to {\n                        color: blue;\n                    }\n                }\n            }\n        }\n    }\n}\n\n@include test-module('animation-name-set') {\n    @include test('should output prefixed animation name property') {\n        @include assert('Outputs prefixed animation name property.') {\n            @include input {\n                @include animation-name-set('vitalize');\n            }\n\n            @include expect {\n                -webkit-animation-name: \"vitalize\";\n                animation-name: \"vitalize\";\n            }\n        }\n    }\n}\n\n@include test-module('animation-properties-set') {\n    @include test('should output prefixed animation properties') {\n        @include assert('Outputs prefixed animation property.') {\n            @include input {\n                $properties: (\n                    'count': 2,\n                    'delay': 250ms\n                );\n\n                @include animation-properties-set($properties);\n            }\n\n            @include expect {\n                -webkit-animation-iteration-count: 2;\n                animation-iteration-count: 2;\n                -webkit-animation-delay: 250ms;\n                animation-delay: 250ms;\n            }\n        }\n    }\n}\n\n@include test-module('animation-property-set') {\n    @include test('should output prefixed animation property') {\n        @include assert('Outputs prefixed animation property.') {\n            @include input {\n                @include animation-property-set('delay', 250ms);\n            }\n\n            @include expect {\n                -webkit-animation-delay: 250ms;\n                animation-delay: 250ms;\n            }\n        }\n    }\n}\n"],"sourceRoot":"/source/"}